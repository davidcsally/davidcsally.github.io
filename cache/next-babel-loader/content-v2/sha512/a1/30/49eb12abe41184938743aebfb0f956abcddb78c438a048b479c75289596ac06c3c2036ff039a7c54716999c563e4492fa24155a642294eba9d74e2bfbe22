{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// actions\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const SET_ANIMATION = 'SET_ANIMATION';\nexport const MOVE_NEW_TO_SAVED = 'MOVE_NEW_TO_SAVED';\nexport const moveNewToSaved = payload => ({\n  action: MOVE_NEW_TO_SAVED\n});\nexport const chatReducer = (state, action) => {\n  const {\n    payload,\n    type\n  } = action;\n\n  switch (type) {\n    case SET_ANIMATION:\n      {\n        const {\n          savedMessages\n        } = state;\n        const copy = savedMessages.slice(0, payload);\n\n        const updated = _objectSpread(_objectSpread({}, savedMessages[payload]), {}, {\n          initial: false\n        });\n\n        const rest = savedMessages.slice(payload + 1);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          savedMessages: copy.concat(updated).concat(rest)\n        });\n      }\n\n    case ADD_MESSAGE:\n      {\n        const newMessage = {\n          message: payload,\n          initial: true,\n          isSender: true\n        };\n        const newMessages = [...state.newMessages, newMessage];\n        return _objectSpread(_objectSpread({}, state), {}, {\n          newMessages\n        });\n      }\n\n    case MOVE_NEW_TO_SAVED:\n      {\n        const savedMessages = state.savedMessages.map(m => _objectSpread(_objectSpread({}, m), {}, {\n          initial: false\n        }));\n        const newMessages = state.newMessages.map(m => _objectSpread(_objectSpread({}, m), {}, {\n          initial: false\n        }));\n        return {\n          savedMessages: [...savedMessages, ...newMessages],\n          newMessages: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}