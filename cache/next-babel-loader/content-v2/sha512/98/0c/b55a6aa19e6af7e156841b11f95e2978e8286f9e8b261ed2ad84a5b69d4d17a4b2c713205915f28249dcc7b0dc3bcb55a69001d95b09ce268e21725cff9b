{"ast":null,"code":"import _defineProperty from \"/home/runner/work/davidcsally.github.io/davidcsally.github.io/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _taggedTemplateLiteral from \"/home/runner/work/davidcsally.github.io/davidcsally.github.io/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    bottom: 1rem;\\n    left: auto;\\n    right: 1rem;\\n    width: 100%;\\n    max-height: 32rem;\\n    max-width: 400px;\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { media } from 'styles/media';\nimport MiniChat from './MiniChat';\nimport ChatSection from './ChatSection';\nimport ChatFooter from './ChatFooter';\nimport ChatHeader from './ChatHeader';\nimport { initialState } from './mock';\nimport { chatReducer, MOVE_NEW_TO_SAVED, ADD_MESSAGE } from './reducer';\nconst StyledMiniChat = styled(MiniChat).withConfig({\n  displayName: \"Chatbot__StyledMiniChat\",\n  componentId: \"n64yy6-0\"\n})([\"position:fixed;bottom:1rem;right:2rem;\"]);\nconst Container = styled(motion.div).withConfig({\n  displayName: \"Chatbot__Container\",\n  componentId: \"n64yy6-1\"\n})([\"bottom:0rem;right:0.25rem;left:0.25rem;position:fixed;z-index:50;display:flex;flex-direction:column;height:100%;height:100%;border-radius:10px;overflow:hidden;background-color:rgb(255,255,255);transform:translateZ(0);\", \"\"], media.small(_templateObject()));\nconst animation = {\n  initial: {\n    opacity: 0,\n    x: 400\n  },\n  animate: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      duration: 0.4,\n      delay: 0.25\n    }\n  },\n  exit: {\n    opacity: 0,\n    x: 400,\n    transition: {\n      duration: 0.4\n    }\n  }\n};\n\nconst Chatbot = ({\n  isOpen,\n  closeChat,\n  openChat\n}) => {\n  const _useReducer = useReducer(chatReducer, initialState),\n        chatMessages = _useReducer[0],\n        updateMessages = _useReducer[1];\n\n  const _useState = useState(''),\n        chatValue = _useState[0],\n        setChatValue = _useState[1];\n\n  const submitMessage = e => {\n    const value = e.currentTarget.value;\n\n    if (e.key === 'Enter') {\n      updateMessages({\n        type: ADD_MESSAGE,\n        payload: value\n      });\n      setChatValue('');\n    }\n  };\n\n  const onClose = () => {\n    updateMessages({\n      type: MOVE_NEW_TO_SAVED\n    });\n    closeChat();\n  };\n\n  return /*#__PURE__*/_jsx(AnimatePresence, {\n    children: isOpen ? /*#__PURE__*/_jsxs(Container, _objectSpread(_objectSpread({\n      layout: true\n    }, animation), {}, {\n      children: [/*#__PURE__*/_jsx(ChatHeader, {\n        closeChat: onClose\n      }), /*#__PURE__*/_jsx(ChatSection, {\n        closeChat: onClose,\n        savedMessages: chatMessages.savedMessages,\n        newMessages: chatMessages.newMessages,\n        updateMessages: updateMessages\n      }), /*#__PURE__*/_jsx(ChatFooter, {\n        chatValue: chatValue,\n        submitMessage: submitMessage,\n        setChatValue: setChatValue\n      })]\n    }), \"chat\") : /*#__PURE__*/_jsx(StyledMiniChat, {\n      onClick: openChat\n    })\n  });\n};\n\nexport default Chatbot;","map":null,"metadata":{},"sourceType":"module"}