{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/runner/work/davidcsally.github.io/davidcsally.github.io/node_modules/next/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/runner/work/davidcsally.github.io/davidcsally.github.io/node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _interopRequireWildcard3 = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.render = render;\nexports.renderError = renderError;\nexports.default = exports.emitter = exports.router = exports.version = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"@babel/runtime/helpers/interopRequireWildcard\"));\n\nrequire(\"@next/polyfill-module\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _headManagerContext = require(\"../next-server/lib/head-manager-context\");\n\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\n\nvar _routerContext = require(\"../next-server/lib/router-context\");\n\nvar _router = require(\"../next-server/lib/router/router\");\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar querystring = _interopRequireWildcard3(require(\"../next-server/lib/router/utils/querystring\"));\n\nvar envConfig = _interopRequireWildcard3(require(\"../next-server/lib/runtime-config\"));\n\nvar _utils = require(\"../next-server/lib/utils\");\n\nvar _headManager = _interopRequireDefault(require(\"./head-manager\"));\n\nvar _pageLoader = _interopRequireDefault(require(\"./page-loader\"));\n\nvar _performanceRelayer = _interopRequireDefault(require(\"./performance-relayer\"));\n\nvar _router2 = require(\"./router\");\n/* global location */\n\n\nconst data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nwindow.__NEXT_DATA__ = data;\nconst version = \"10.0.6\";\nexports.version = version;\n\nconst looseToArray = input => [].slice.call(input);\n\nconst hydrateProps = data.props,\n      hydrateErr = data.err,\n      page = data.page,\n      query = data.query,\n      buildId = data.buildId,\n      assetPrefix = data.assetPrefix,\n      runtimeConfig = data.runtimeConfig,\n      dynamicIds = data.dynamicIds,\n      isFallback = data.isFallback,\n      locale = data.locale,\n      locales = data.locales,\n      domainLocales = data.domainLocales;\nlet defaultLocale = data.defaultLocale;\nconst prefix = assetPrefix || ''; // With dynamic assetPrefix it's no longer possible to set assetPrefix at the build time\n// So, this is how we do it in the client side at runtime\n\n__webpack_public_path__ = \"\".concat(prefix, \"/_next/\"); //eslint-disable-line\n// Initialize next/config with the environment configuration\n\nenvConfig.setConfig({\n  serverRuntimeConfig: {},\n  publicRuntimeConfig: runtimeConfig || {}\n});\nlet asPath = (0, _utils.getURL)(); // make sure not to attempt stripping basePath for 404s\n\nif ((0, _router.hasBasePath)(asPath)) {\n  asPath = (0, _router.delBasePath)(asPath);\n}\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  const _require = require('../next-server/lib/i18n/normalize-locale-path'),\n        normalizeLocalePath = _require.normalizeLocalePath;\n\n  const _require2 = require('../next-server/lib/i18n/detect-domain-locale'),\n        detectDomainLocale = _require2.detectDomainLocale;\n\n  const _require3 = require('../next-server/lib/router/utils/parse-relative-url'),\n        parseRelativeUrl = _require3.parseRelativeUrl;\n\n  const _require4 = require('../next-server/lib/router/utils/format-url'),\n        formatUrl = _require4.formatUrl;\n\n  if (locales) {\n    const parsedAs = parseRelativeUrl(asPath);\n    const localePathResult = normalizeLocalePath(parsedAs.pathname, locales);\n\n    if (localePathResult.detectedLocale) {\n      parsedAs.pathname = localePathResult.pathname;\n      asPath = formatUrl(parsedAs);\n    } else {\n      // derive the default locale if it wasn't detected in the asPath\n      // since we don't prerender static pages with all possible default\n      // locales\n      defaultLocale = locale;\n    } // attempt detecting default locale based on hostname\n\n\n    const detectedDomain = detectDomainLocale(process.env.__NEXT_I18N_DOMAINS, window.location.hostname); // TODO: investigate if defaultLocale needs to be populated after\n    // hydration to prevent mismatched renders\n\n    if (detectedDomain) {\n      defaultLocale = detectedDomain.defaultLocale;\n    }\n  }\n}\n\nconst pageLoader = new _pageLoader.default(buildId, prefix);\n\nconst register = ([r, f]) => pageLoader.routeLoader.onEntrypoint(r, f);\n\nif (window.__NEXT_P) {\n  // Defer page registration for another tick. This will increase the overall\n  // latency in hydrating the page, but reduce the total blocking time.\n  window.__NEXT_P.map(p => setTimeout(() => register(p), 0));\n}\n\nwindow.__NEXT_P = [];\nwindow.__NEXT_P.push = register;\nconst headManager = (0, _headManager.default)();\nconst appElement = document.getElementById('__next');\nlet lastRenderReject;\nlet webpackHMR;\nlet router;\nexports.router = router;\nlet CachedApp, onPerfEntry;\n\nclass Container extends _react.default.Component {\n  componentDidCatch(componentErr, info) {\n    this.props.fn(componentErr, info);\n  }\n\n  componentDidMount() {\n    this.scrollToHash(); // We need to replace the router state if:\n    // - the page was (auto) exported and has a query string or search (hash)\n    // - it was auto exported and is a dynamic route (to provide params)\n    // - if it is a client-side skeleton (fallback render)\n\n    if (router.isSsr && (isFallback || data.nextExport && ((0, _isDynamic.isDynamicRoute)(router.pathname) || location.search) || hydrateProps && hydrateProps.__N_SSG && location.search)) {\n      // update query on mount for exported pages\n      router.replace(router.pathname + '?' + String(querystring.assign(querystring.urlQueryToSearchParams(router.query), new URLSearchParams(location.search))), asPath, {\n        // @ts-ignore\n        // WARNING: `_h` is an internal option for handing Next.js\n        // client-side hydration. Your app should _never_ use this property.\n        // It may change at any time without notice.\n        _h: 1,\n        // Fallback pages must trigger the data fetch, so the transition is\n        // not shallow.\n        // Other pages (strictly updating query) happens shallowly, as data\n        // requirements would already be present.\n        shallow: !isFallback\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToHash();\n  }\n\n  scrollToHash() {\n    let _location = location,\n        hash = _location.hash;\n    hash = hash && hash.substring(1);\n    if (!hash) return;\n    const el = document.getElementById(hash);\n    if (!el) return; // If we call scrollIntoView() in here without a setTimeout\n    // it won't scroll properly.\n\n    setTimeout(() => el.scrollIntoView(), 0);\n  }\n\n  render() {\n    if (true) {\n      return this.props.children;\n    } else {\n      const _require5 = require('@next/react-dev-overlay/lib/client'),\n            ReactDevOverlay = _require5.ReactDevOverlay;\n\n      return /*#__PURE__*/_react.default.createElement(ReactDevOverlay, null, this.props.children);\n    }\n  }\n\n}\n\nconst emitter = (0, _mitt.default)();\nexports.emitter = emitter;\nlet CachedComponent;\n\nvar _default = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts = {}) {\n    var appEntrypoint, app, mod, initialErr, pageEntrypoint, _require6, isValidElementType, _require7, getNodeError, renderCtx;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // This makes sure this specific lines are removed in production\n          if (false) {\n            webpackHMR = opts.webpackHMR;\n          }\n\n          _context.next = 3;\n          return pageLoader.routeLoader.whenEntrypoint('/_app');\n\n        case 3:\n          appEntrypoint = _context.sent;\n\n          if (!('error' in appEntrypoint)) {\n            _context.next = 6;\n            break;\n          }\n\n          throw appEntrypoint.error;\n\n        case 6:\n          app = appEntrypoint.component, mod = appEntrypoint.exports;\n          CachedApp = app;\n\n          if (mod && mod.reportWebVitals) {\n            onPerfEntry = ({\n              id,\n              name,\n              startTime,\n              value,\n              duration,\n              entryType,\n              entries\n            }) => {\n              // Combines timestamp with random number for unique ID\n              const uniqueID = \"\".concat(Date.now(), \"-\").concat(Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n              let perfStartEntry;\n\n              if (entries && entries.length) {\n                perfStartEntry = entries[0].startTime;\n              }\n\n              mod.reportWebVitals({\n                id: id || uniqueID,\n                name,\n                startTime: startTime || perfStartEntry,\n                value: value == null ? duration : value,\n                label: entryType === 'mark' || entryType === 'measure' ? 'custom' : 'web-vital'\n              });\n            };\n          }\n\n          initialErr = hydrateErr;\n          _context.prev = 10;\n\n          if (!(false && hydrateErr)) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.t0 = {\n            error: hydrateErr\n          };\n          _context.next = 18;\n          break;\n\n        case 15:\n          _context.next = 17;\n          return pageLoader.routeLoader.whenEntrypoint(page);\n\n        case 17:\n          _context.t0 = _context.sent;\n\n        case 18:\n          pageEntrypoint = _context.t0;\n\n          if (!('error' in pageEntrypoint)) {\n            _context.next = 21;\n            break;\n          }\n\n          throw pageEntrypoint.error;\n\n        case 21:\n          CachedComponent = pageEntrypoint.component;\n\n          if (!false) {\n            _context.next = 26;\n            break;\n          }\n\n          _require6 = require('react-is'), isValidElementType = _require6.isValidElementType;\n\n          if (isValidElementType(CachedComponent)) {\n            _context.next = 26;\n            break;\n          }\n\n          throw new Error(\"The default export is not a React Component in page: \\\"\".concat(page, \"\\\"\"));\n\n        case 26:\n          _context.next = 31;\n          break;\n\n        case 28:\n          _context.prev = 28;\n          _context.t1 = _context[\"catch\"](10);\n          // This catches errors like throwing in the top level of a module\n          initialErr = _context.t1;\n\n        case 31:\n          if (false) {\n            _require7 = require('@next/react-dev-overlay/lib/client'), getNodeError = _require7.getNodeError; // Server-side runtime errors need to be re-thrown on the client-side so\n            // that the overlay is rendered.\n\n            if (initialErr) {\n              if (initialErr === hydrateErr) {\n                setTimeout(() => {\n                  let error;\n\n                  try {\n                    // Generate a new error object. We `throw` it because some browsers\n                    // will set the `stack` when thrown, and we want to ensure ours is\n                    // not overridden when we re-throw it below.\n                    throw new Error(initialErr.message);\n                  } catch (e) {\n                    error = e;\n                  }\n\n                  error.name = initialErr.name;\n                  error.stack = initialErr.stack;\n                  const node = getNodeError(error);\n                  throw node;\n                });\n              } // We replaced the server-side error with a client-side error, and should\n              // no longer rewrite the stack trace to a Node error.\n              else {\n                  setTimeout(() => {\n                    throw initialErr;\n                  });\n                }\n            }\n          }\n\n          if (!window.__NEXT_PRELOADREADY) {\n            _context.next = 35;\n            break;\n          }\n\n          _context.next = 35;\n          return window.__NEXT_PRELOADREADY(dynamicIds);\n\n        case 35:\n          exports.router = router = (0, _router2.createRouter)(page, query, asPath, {\n            initialProps: hydrateProps,\n            pageLoader,\n            App: CachedApp,\n            Component: CachedComponent,\n            wrapApp,\n            err: initialErr,\n            isFallback: Boolean(isFallback),\n            subscription: (info, App, scroll) => render(Object.assign({}, info, {\n              App,\n              scroll\n            })),\n            locale,\n            locales,\n            defaultLocale,\n            domainLocales\n          }); // call init-client middleware\n\n          if (process.env.__NEXT_PLUGINS) {\n            // @ts-ignore\n            // eslint-disable-next-line\n            Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('next-plugin-loader?middleware=on-init-client!'))).then(initClientModule => {\n              return initClientModule.default({\n                router\n              });\n            }).catch(initClientErr => {\n              console.error('Error calling client-init for plugins', initClientErr);\n            });\n          }\n\n          renderCtx = {\n            App: CachedApp,\n            initial: true,\n            Component: CachedComponent,\n            props: hydrateProps,\n            err: initialErr\n          };\n\n          if (!true) {\n            _context.next = 43;\n            break;\n          }\n\n          render(renderCtx);\n          return _context.abrupt(\"return\", emitter);\n\n        case 43:\n          return _context.abrupt(\"return\", {\n            emitter,\n            render,\n            renderCtx\n          });\n\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[10, 28]]);\n  }));\n\n  return function _default() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.default = _default;\n\nfunction render(_x) {\n  return _render.apply(this, arguments);\n} // This method handles all runtime and debug errors.\n// 404 and 500 errors are special kind of errors\n// and they are still handle via the main render method.\n\n\nfunction _render() {\n  _render = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(renderingProps) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!renderingProps.err) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 3;\n          return renderError(renderingProps);\n\n        case 3:\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          _context2.prev = 4;\n          _context2.next = 7;\n          return doRender(renderingProps);\n\n        case 7:\n          _context2.next = 16;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](4);\n\n          if (!_context2.t0.cancelled) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw _context2.t0;\n\n        case 13:\n          if (false) {\n            // Ensure this error is displayed in the overlay in development\n            setTimeout(() => {\n              throw _context2.t0;\n            });\n          }\n\n          _context2.next = 16;\n          return renderError((0, _extends2.default)({}, renderingProps, {\n            err: _context2.t0\n          }));\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[4, 9]]);\n  }));\n  return _render.apply(this, arguments);\n}\n\nfunction renderError(renderErrorProps) {\n  const App = renderErrorProps.App,\n        err = renderErrorProps.err; // In development runtime errors are caught by our overlay\n  // In production we catch runtime errors using componentDidCatch which will trigger renderError\n\n  if (false) {\n    // A Next.js rendering runtime error is always unrecoverable\n    // FIXME: let's make this recoverable (error in GIP client-transition)\n    webpackHMR.onUnrecoverableError(); // We need to render an empty <App> so that the `<ReactDevOverlay>` can\n    // render itself.\n\n    return doRender({\n      App: () => null,\n      props: {},\n      Component: () => null,\n      styleSheets: []\n    });\n  }\n\n  if (process.env.__NEXT_PLUGINS) {\n    // @ts-ignore\n    // eslint-disable-next-line\n    Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('next-plugin-loader?middleware=on-error-client!'))).then(onClientErrorModule => {\n      return onClientErrorModule.default({\n        err\n      });\n    }).catch(onClientErrorErr => {\n      console.error('error calling on-error-client for plugins', onClientErrorErr);\n    });\n  } // Make sure we log the error to the console, otherwise users can't track down issues.\n\n\n  console.error(err);\n  return pageLoader.loadPage('/_error').then(({\n    page: ErrorComponent,\n    styleSheets\n  }) => {\n    // In production we do a normal render with the `ErrorComponent` as component.\n    // If we've gotten here upon initial render, we can use the props from the server.\n    // Otherwise, we need to call `getInitialProps` on `App` before mounting.\n    const AppTree = wrapApp(App);\n    const appCtx = {\n      Component: ErrorComponent,\n      AppTree,\n      router,\n      ctx: {\n        err,\n        pathname: page,\n        query,\n        asPath,\n        AppTree\n      }\n    };\n    return Promise.resolve(renderErrorProps.props ? renderErrorProps.props : (0, _utils.loadGetInitialProps)(App, appCtx)).then(initProps => doRender((0, _extends2.default)({}, renderErrorProps, {\n      err,\n      Component: ErrorComponent,\n      styleSheets,\n      props: initProps\n    })));\n  });\n}\n\nlet reactRoot = null;\nlet shouldUseHydrate = typeof _reactDom.default.hydrate === 'function';\n\nfunction renderReactElement(reactEl, domEl) {\n  if (process.env.__NEXT_REACT_MODE !== 'legacy') {\n    if (!reactRoot) {\n      const opts = {\n        hydrate: true\n      };\n      reactRoot = process.env.__NEXT_REACT_MODE === 'concurrent' ? _reactDom.default.unstable_createRoot(domEl, opts) : _reactDom.default.unstable_createBlockingRoot(domEl, opts);\n    }\n\n    reactRoot.render(reactEl);\n  } else {\n    // mark start of hydrate/render\n    if (_utils.ST) {\n      performance.mark('beforeRender');\n    } // The check for `.hydrate` is there to support React alternatives like preact\n\n\n    if (shouldUseHydrate) {\n      _reactDom.default.hydrate(reactEl, domEl, markHydrateComplete);\n\n      shouldUseHydrate = false;\n    } else {\n      _reactDom.default.render(reactEl, domEl, markRenderComplete);\n    }\n  }\n}\n\nfunction markHydrateComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterHydrate'); // mark end of hydration\n\n  performance.measure('Next.js-before-hydration', 'navigationStart', 'beforeRender');\n  performance.measure('Next.js-hydration', 'beforeRender', 'afterHydrate');\n\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-hydration').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n}\n\nfunction markRenderComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterRender'); // mark end of render\n\n  const navStartEntries = performance.getEntriesByName('routeChange', 'mark');\n  if (!navStartEntries.length) return;\n  performance.measure('Next.js-route-change-to-render', navStartEntries[0].name, 'beforeRender');\n  performance.measure('Next.js-render', 'beforeRender', 'afterRender');\n\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-render').forEach(onPerfEntry);\n    performance.getEntriesByName('Next.js-route-change-to-render').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n  ['Next.js-route-change-to-render', 'Next.js-render'].forEach(measure => performance.clearMeasures(measure));\n}\n\nfunction clearMarks() {\n  ;\n  ['beforeRender', 'afterHydrate', 'afterRender', 'routeChange'].forEach(mark => performance.clearMarks(mark));\n}\n\nfunction AppContainer({\n  children\n}) {\n  return /*#__PURE__*/_react.default.createElement(Container, {\n    fn: error => renderError({\n      App: CachedApp,\n      err: error\n    }).catch(err => console.error('Error rendering page: ', err))\n  }, /*#__PURE__*/_react.default.createElement(_routerContext.RouterContext.Provider, {\n    value: (0, _router2.makePublicRouterInstance)(router)\n  }, /*#__PURE__*/_react.default.createElement(_headManagerContext.HeadManagerContext.Provider, {\n    value: headManager\n  }, children)));\n}\n\nconst wrapApp = App => wrappedAppProps => {\n  const appProps = (0, _extends2.default)({}, wrappedAppProps, {\n    Component: CachedComponent,\n    err: hydrateErr,\n    router\n  });\n  return /*#__PURE__*/_react.default.createElement(AppContainer, null, /*#__PURE__*/_react.default.createElement(App, appProps));\n};\n\nlet lastAppProps;\n\nfunction doRender(input) {\n  let App = input.App,\n      Component = input.Component,\n      props = input.props,\n      err = input.err;\n  let styleSheets = 'initial' in input ? undefined : input.styleSheets;\n  Component = Component || lastAppProps.Component;\n  props = props || lastAppProps.props;\n  const appProps = (0, _extends2.default)({}, props, {\n    Component,\n    err,\n    router\n  }); // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.\n\n  lastAppProps = appProps;\n  let canceled = false;\n  let resolvePromise;\n  const renderPromise = new Promise((resolve, reject) => {\n    if (lastRenderReject) {\n      lastRenderReject();\n    }\n\n    resolvePromise = () => {\n      lastRenderReject = null;\n      resolve();\n    };\n\n    lastRenderReject = () => {\n      canceled = true;\n      lastRenderReject = null;\n      const error = new Error('Cancel rendering route');\n      error.cancelled = true;\n      reject(error);\n    };\n  }); // This function has a return type to ensure it doesn't start returning a\n  // Promise. It should remain synchronous.\n\n  function onStart() {\n    if (!styleSheets || // We use `style-loader` in development, so we don't need to do anything\n    // unless we're in production:\n    false) {\n      return false;\n    }\n\n    const currentStyleTags = looseToArray(document.querySelectorAll('style[data-n-href]'));\n    const currentHrefs = new Set(currentStyleTags.map(tag => tag.getAttribute('data-n-href')));\n    const noscript = document.querySelector('noscript[data-n-css]');\n    const nonce = noscript == null ? void 0 : noscript.getAttribute('data-n-css');\n    styleSheets.forEach(({\n      href,\n      text\n    }) => {\n      if (!currentHrefs.has(href)) {\n        const styleTag = document.createElement('style');\n        styleTag.setAttribute('data-n-href', href);\n        styleTag.setAttribute('media', 'x');\n\n        if (nonce) {\n          styleTag.setAttribute('nonce', nonce);\n        }\n\n        document.head.appendChild(styleTag);\n        styleTag.appendChild(document.createTextNode(text));\n      }\n    });\n    return true;\n  }\n\n  function onHeadCommit() {\n    if ( // We use `style-loader` in development, so we don't need to do anything\n    // unless we're in production:\n    true && // We can skip this during hydration. Running it wont cause any harm, but\n    // we may as well save the CPU cycles:\n    styleSheets && // Ensure this render was not canceled\n    !canceled) {\n      const desiredHrefs = new Set(styleSheets.map(s => s.href));\n      const currentStyleTags = looseToArray(document.querySelectorAll('style[data-n-href]'));\n      const currentHrefs = currentStyleTags.map(tag => tag.getAttribute('data-n-href')); // Toggle `<style>` tags on or off depending on if they're needed:\n\n      for (let idx = 0; idx < currentHrefs.length; ++idx) {\n        if (desiredHrefs.has(currentHrefs[idx])) {\n          currentStyleTags[idx].removeAttribute('media');\n        } else {\n          currentStyleTags[idx].setAttribute('media', 'x');\n        }\n      } // Reorder styles into intended order:\n\n\n      let referenceNode = document.querySelector('noscript[data-n-css]');\n\n      if ( // This should be an invariant:\n      referenceNode) {\n        styleSheets.forEach(({\n          href\n        }) => {\n          const targetTag = document.querySelector(\"style[data-n-href=\\\"\".concat(href, \"\\\"]\"));\n\n          if ( // This should be an invariant:\n          targetTag) {\n            referenceNode.parentNode.insertBefore(targetTag, referenceNode.nextSibling);\n            referenceNode = targetTag;\n          }\n        });\n      } // Finally, clean up server rendered stylesheets:\n\n\n      looseToArray(document.querySelectorAll('link[data-n-p]')).forEach(el => {\n        el.parentNode.removeChild(el);\n      }); // Force browser to recompute layout, which should prevent a flash of\n      // unstyled content:\n\n      getComputedStyle(document.body, 'height');\n    }\n\n    if (input.scroll) {\n      window.scrollTo(input.scroll.x, input.scroll.y);\n    }\n  }\n\n  function onRootCommit() {\n    resolvePromise();\n  }\n\n  const elem = /*#__PURE__*/_react.default.createElement(Root, {\n    callback: onRootCommit\n  }, /*#__PURE__*/_react.default.createElement(Head, {\n    callback: onHeadCommit\n  }), /*#__PURE__*/_react.default.createElement(AppContainer, null, /*#__PURE__*/_react.default.createElement(App, appProps)));\n\n  onStart(); // We catch runtime errors using componentDidCatch which will trigger renderError\n\n  renderReactElement(process.env.__NEXT_STRICT_MODE ? /*#__PURE__*/_react.default.createElement(_react.default.StrictMode, null, elem) : elem, appElement);\n  return renderPromise;\n}\n\nfunction Root({\n  callback,\n  children\n}) {\n  // We use `useLayoutEffect` to guarantee the callback is executed\n  // as soon as React flushes the update.\n  _react.default.useLayoutEffect(() => callback(), [callback]);\n\n  if (process.env.__NEXT_TEST_MODE) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    _react.default.useEffect(() => {\n      window.__NEXT_HYDRATED = true;\n\n      if (window.__NEXT_HYDRATED_CB) {\n        window.__NEXT_HYDRATED_CB();\n      }\n    }, []);\n  } // We should ask to measure the Web Vitals after rendering completes so we\n  // don't cause any hydration delay:\n\n\n  _react.default.useEffect(() => {\n    (0, _performanceRelayer.default)(onPerfEntry);\n  }, []);\n\n  return children;\n} // Dummy component that we render as a child of Root so that we can\n// toggle the correct styles before the page is rendered.\n\n\nfunction Head({\n  callback\n}) {\n  // We use `useLayoutEffect` to guarantee the callback is executed\n  // as soon as React flushes the update.\n  _react.default.useLayoutEffect(() => callback(), [callback]);\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"script"}