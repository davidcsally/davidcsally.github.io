{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useViewportScroll, useTransform, motion } from 'framer-motion';\nimport styled from 'styled-components';\nconst Text = styled.p.withConfig({\n  displayName: \"SupremeBlock__Text\",\n  componentId: \"sc-1n8m57c-0\"\n})([\"display:inline-flex;padding:1rem;font-size:2rem;font-family:'Futura-Heavy-Oblique',Arial,Helvetica,sans-serif;color:white;\"]);\nconst Column = styled.section.withConfig({\n  displayName: \"SupremeBlock__Column\",\n  componentId: \"sc-1n8m57c-1\"\n})([\"display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%;min-height:400px;padding:1rem;background-color:yellow;background-color:var(--supremely-red);overflow:hidden;max-width:90rem;margin:0 auto;\"]);\nconst Mask = styled.div.withConfig({\n  displayName: \"SupremeBlock__Mask\",\n  componentId: \"sc-1n8m57c-2\"\n})([\"overflow:hidden;padding:0 2rem;background-color:var(--supremely-red);\"]);\nconst Overflow = styled(motion.div).withConfig({\n  displayName: \"SupremeBlock__Overflow\",\n  componentId: \"sc-1n8m57c-3\"\n})([\"width:100%;display:block;white-space:nowrap;\"]);\n\nconst calculateNodes = ref => {\n  const node = ref.current;\n  const body = document.querySelector('body');\n\n  if (node && node.offsetWidth) {\n    return Math.round(body.offsetWidth / node.offsetWidth + 1);\n  }\n\n  return 1;\n};\n/**\n * This block says has text that scrolls with the viewport\n */\n\n\nexport const SupremeBlock = () => {\n  const _useState = useState(1),\n        numToShow = _useState[0],\n        setNumToShow = _useState[1];\n\n  const _useViewportScroll = useViewportScroll(),\n        scrollYProgress = _useViewportScroll.scrollYProgress;\n\n  const myRef = useRef(null);\n  const x1 = useTransform(scrollYProgress, [0, 1], ['0%', '-65%']);\n  const x2 = useTransform(scrollYProgress, [0, 1], ['-65%', '0%']); // Attach resize listener on mount\n\n  useEffect(() => {\n    setNumToShow(calculateNodes(myRef));\n\n    const handleResize = () => setNumToShow(calculateNodes(myRef));\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [setNumToShow]);\n  const nodes = [];\n  nodes.push( /*#__PURE__*/_jsx(Text, {\n    ref: myRef,\n    children: \"Full Stack Engineer\"\n  }, \"-1\"));\n\n  for (let i = 0; i < numToShow * 2; i += 1) {\n    nodes.push( /*#__PURE__*/_jsx(Text, {\n      children: \"Full Stack Engineer\"\n    }, i));\n  }\n\n  return /*#__PURE__*/_jsx(Mask, {\n    children: /*#__PURE__*/_jsxs(Column, {\n      children: [/*#__PURE__*/_jsx(Overflow, {\n        style: {\n          x: x1\n        },\n        children: nodes\n      }), /*#__PURE__*/_jsx(Overflow, {\n        style: {\n          x: x2\n        },\n        children: nodes\n      }), /*#__PURE__*/_jsx(Overflow, {\n        style: {\n          x: x1\n        },\n        children: nodes\n      }), /*#__PURE__*/_jsx(Overflow, {\n        style: {\n          x: x2\n        },\n        children: nodes\n      })]\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}