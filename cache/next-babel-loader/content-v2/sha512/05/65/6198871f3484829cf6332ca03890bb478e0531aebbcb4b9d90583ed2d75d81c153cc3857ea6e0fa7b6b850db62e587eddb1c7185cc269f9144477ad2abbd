{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _router = require(\"../next-server/lib/router/router\");\n\nvar _getAssetPathFromRoute = _interopRequireDefault(require(\"../next-server/lib/router/utils/get-asset-path-from-route\"));\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"../next-server/lib/router/utils/parse-relative-url\");\n\nvar _routeLoader = _interopRequireWildcard(require(\"./route-loader\"));\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(\"Route name should start with a \\\"/\\\", got \\\"\".concat(route, \"\\\"\"));\n  }\n\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nclass PageLoader {\n  constructor(buildId, assetPrefix) {\n    this.buildId = void 0;\n    this.assetPrefix = void 0;\n    this.promisedSsgManifest = void 0;\n    this.promisedDevPagesManifest = void 0;\n    this.routeLoader = void 0;\n    this.routeLoader = (0, _routeLoader.default)(assetPrefix);\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    /** @type {Promise<Set<string>>} */\n\n    this.promisedSsgManifest = new Promise(resolve => {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        ;\n\n        window.__SSG_MANIFEST_CB = () => {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  }\n\n  getPageList() {\n    if (true) {\n      return (0, _routeLoader.getClientBuildManifest)().then(manifest => manifest.sortedPages);\n    } else {\n      if (window.__DEV_PAGES_MANIFEST) {\n        return window.__DEV_PAGES_MANIFEST.pages;\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(\"\".concat(this.assetPrefix, \"/_next/static/development/_devPagesManifest.json\")).then(res => res.json()).then(manifest => {\n            ;\n            window.__DEV_PAGES_MANIFEST = manifest;\n            return manifest.pages;\n          }).catch(err => {\n            console.log(\"Failed to fetch devPagesManifest\", err);\n          });\n        }\n\n        return this.promisedDevPagesManifest;\n      }\n    }\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  * @returns {string}\n  */\n\n\n  getDataHref(href, asPath, ssg, locale) {\n    const _ref = (0, _parseRelativeUrl.parseRelativeUrl)(href),\n          hrefPathname = _ref.pathname,\n          query = _ref.query,\n          search = _ref.search;\n\n    const _ref2 = (0, _parseRelativeUrl.parseRelativeUrl)(asPath),\n          asPathname = _ref2.pathname;\n\n    const route = normalizeRoute(hrefPathname);\n\n    const getHrefForSlug = path => {\n      const dataRoute = (0, _getAssetPathFromRoute.default)((0, _router.addLocale)(path, locale), '.json');\n      return (0, _router.addBasePath)(\"/_next/data/\".concat(this.buildId).concat(dataRoute).concat(ssg ? '' : search));\n    };\n\n    const isDynamic = (0, _isDynamic.isDynamicRoute)(route);\n    const interpolatedRoute = isDynamic ? (0, _router.interpolateAs)(hrefPathname, asPathname, query).result : '';\n    return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  */\n\n\n  _isSsg(href) {\n    const _ref3 = (0, _parseRelativeUrl.parseRelativeUrl)(href),\n          hrefPathname = _ref3.pathname;\n\n    const route = normalizeRoute(hrefPathname);\n    return this.promisedSsgManifest.then(s => s.has(route));\n  }\n\n  loadPage(route) {\n    return this.routeLoader.loadRoute(route).then(res => {\n      if ('component' in res) {\n        return {\n          page: res.component,\n          mod: res.exports,\n          styleSheets: res.styles.map(o => ({\n            href: o.href,\n            text: o.content\n          }))\n        };\n      }\n\n      throw res.error;\n    });\n  }\n\n  prefetch(route) {\n    return this.routeLoader.prefetch(route);\n  }\n\n}\n\nexports.default = PageLoader;","map":null,"metadata":{},"sourceType":"script"}